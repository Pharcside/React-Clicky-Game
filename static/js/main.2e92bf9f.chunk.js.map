{"version":3,"sources":["components/FriendCard/index.js","components/Wrapper/index.js","components/Title/index.js","App.js","serviceWorker.js","index.js"],"names":["FriendCard","props","react_default","a","createElement","className","alt","name","src","image","Wrapper","children","Title","App","state","friends","clickedPoster","score","imageClick","event","currentPoster","target","_this","indexOf","setState","fish","sort","b","Math","random","alert","concat","frineds","_this2","this","components_Wrapper","components_Title","map","components_FriendCard","id","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6mEA6BeA,MA1Bf,SAAoBC,GAClB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKE,IAAKL,EAAMM,KAAMC,IAAKP,EAAMQ,SAEnCP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,uBADF,IAC0BH,EAAMM,gBCL3BG,MAJf,SAAiBT,GACf,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMU,iBCG1BC,MAJf,SAAeX,GACb,OAAOC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAASJ,EAAMU,kBCoFvBE,6MAjFbC,MAAQ,CACNC,UACAC,cAAe,GACfC,MAAO,KAITC,WAAa,SAAAC,GACX,IAAMC,EAAgBD,EAAME,OAAOf,IAEjCgB,EAAKR,MAAME,cAAcO,QAAQH,IAAkB,GAInDE,EAAKE,SAAS,CACZC,KAAMH,EAAKR,MAAMC,QAAQW,KAAK,SAASvB,EAAGwB,GACxC,MAAO,GAAMC,KAAKC,WAEpBb,cAAe,GACfC,MAAO,IAEPa,MAAM,0BAIRR,EAAKE,SACH,CACEC,KAAMH,EAAKR,MAAMC,QAAQW,KAAK,SAASvB,EAAGwB,GACxC,MAAO,GAAMC,KAAKC,WAEpBb,cAAeM,EAAKR,MAAME,cAAce,OACtCX,GAEFH,MAAOK,EAAKR,MAAMG,MAAQ,GAG5B,WAC2B,KAArBK,EAAKR,MAAMG,QACba,MAAM,iBACNR,EAAKE,SAAS,CACZC,KAAMH,EAAKR,MAAMkB,QAAQN,KAAK,SAASvB,EAAGwB,GACxC,MAAO,GAAMC,KAAKC,WAEpBb,cAAe,GACfC,MAAO,gFASV,IAAAgB,EAAAC,KACP,OACEhC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC+B,EAAD,KAECjC,EAAAC,EAAAC,cAACgC,EAAD,KACElC,EAAAC,EAAAC,cAAA,oCAHH,SAKS8B,KAAKpB,MAAMG,MALpB,KAQAf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACZ6B,KAAKpB,MAAMC,QAAQsB,IAAI,SAAAtB,GAAO,OAC7Bb,EAAAC,EAAAC,cAACkC,EAAD,CACEpB,WAAYe,EAAKf,WACjBqB,GAAIxB,EAAQwB,GACZC,IAAKzB,EAAQwB,GACb9B,MAAOM,EAAQN,MACfF,KAAMQ,EAAQR,mBAxEVkC,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9C,EAAAC,EAAAC,cAAC6C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.2e92bf9f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction FriendCard(props) {\r\n  return (\r\n    <div className=\"card\">\r\n      <div className=\"img-container\">\r\n        <img alt={props.name} src={props.image} />\r\n      </div>\r\n      <div className=\"content\">\r\n        <ul>\r\n          <li>\r\n            <strong>Name:</strong> {props.name}\r\n          </li>\r\n          {/* <li>\r\n            <strong>Occupation:</strong> {props.occupation}\r\n          </li> */}\r\n          {/* <li>\r\n            <strong>Location:</strong> {props.location}\r\n          </li> */}\r\n        </ul>\r\n      </div>\r\n      {/* <span onClick={() => props.removeFriend(props.id)} className=\"remove\">\r\n        ùòÖ\r\n      </span> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FriendCard;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n  return <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Title(props) {\r\n  return <h1 className=\"title\">{props.children}</h1>;\r\n}\r\n\r\nexport default Title;","import React, { Component } from \"react\";\nimport FriendCard from \"./components/FriendCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport friends from \"./friends.json\";\n\nclass App extends Component {\n  state = {\n    friends,\n    clickedPoster: [],\n    score: 0\n  };\n\n//when you click on a card ... the fish is taken out of the array\n  imageClick = event => {\n    const currentPoster = event.target.alt;\n    const PosterAlreadyClicked =\n      this.state.clickedPoster.indexOf(currentPoster) > -1;\n\n//if you click on a fish that has already been selected, the game is reset and cards reordered\n    if (PosterAlreadyClicked) {\n      this.setState({\n        fish: this.state.friends.sort(function(a, b) {\n          return 0.5 - Math.random();\n        }),\n        clickedPoster: [],\n        score: 0\n      });\n        alert(\"You lose. Play again?\");\n\n//if you click on an available fish, your score is increased and cards reordered\n    } else {\n      this.setState(\n        {\n          fish: this.state.friends.sort(function(a, b) {\n            return 0.5 - Math.random();\n          }),\n          clickedPoster: this.state.clickedPoster.concat(\n            currentPoster\n          ),\n          score: this.state.score + 1\n        },\n//if you get all 12 fish corrent you get a congrats message and the game resets        \n        () => {\n          if (this.state.score === 12) {\n            alert(\"Yay! You Win!\");\n            this.setState({\n              fish: this.state.frineds.sort(function(a, b) {\n                return 0.5 - Math.random();\n              }),\n              clickedPoster: [],\n              score: 0\n            });\n          }\n        }\n      );\n    }\n  };\n\n//the order of components to be rendered: navbar, jumbotron, friendcard, footer \n  render() {\n    return (\n      <div>\n        <Wrapper> \n          \n         <Title>\n           <p>Peral Jam Poster Match</p>\n         </Title>\n          score={this.state.score}\n        />\n      \n        <div className=\"wrapper\">\n          {this.state.friends.map(friends => (\n            <FriendCard\n              imageClick={this.imageClick}\n              id={friends.id}\n              key={friends.id}\n              image={friends.image}\n              name={friends.name}\n            />\n          ))}\n        </div>\n        </Wrapper>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}